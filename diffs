? diffs
? pbxbuild.data/AppleBMacEthernet.build/PkgInfo
Index: BMacEnet.cpp
===================================================================
RCS file: /cvs/root/IO/Drivers/Ethernet/AppleBMacEthernet/BMacEnet.cpp,v
retrieving revision 1.5
diff -u -d -b -w -r1.5 BMacEnet.cpp
--- BMacEnet.cpp	2002/12/12 17:49:44	1.5
+++ BMacEnet.cpp	2003/04/14 18:00:54
@@ -92,7 +92,7 @@
 
 	transmitQueue = OSDynamicCast(IOGatedOutputQueue, getOutputQueue());
 	if (!transmitQueue) {
-		IOLog("BMac: output queue initialization failed\n");
+		IOLog( "BMacEnet::start: output queue initialization failed\n" );
 		return false;
 	}
 	transmitQueue->retain();
@@ -115,7 +115,7 @@
 
 	mbufCursor = IOMbufBigMemoryCursor::withSpecification(NETWORK_BUFSIZE, 2);
 	if (!mbufCursor) {
-		IOLog("Ethernet(BMac): IOMbufBigMemoryCursor allocation failure\n");
+		IOLog( "BMacEnet::start: IOMbufBigMemoryCursor allocation failure\n" );
 		return false;
 	}
 
@@ -273,11 +273,12 @@
 		return false;
 	}
 
-	MGETHDR(txDebuggerPkt, M_DONTWAIT, MT_DATA);
-	if (!txDebuggerPkt) {
-		IOLog("Ethernet(BMac): Couldn't allocate KDB buffer\n");
+	txDebuggerPkt = allocatePacket( NETWORK_BUFSIZE );
+	if ( !txDebuggerPkt )
+	{	IOLog( "BMacEnet::start: Couldn't allocate KDB buffer\n" );
 		return false;
 	}
+	txDebuggerPkt->m_next = 0;
 
 #if 0
 	// Enable the interrupt event sources. The hardware interrupts
@@ -376,7 +377,7 @@
     	if (rxMbuf[i]) freePacket(rxMbuf[i]);
 
     for (i = 0; i < txMaxCommand; i++)
-    	if (txMbuf[i]) freePacket(txMbuf[i]);
+    	if ( txMbuf[i] && (txMbuf[i] != txDebuggerPkt) ) freePacket(txMbuf[i]);
 
 	for (i = 0; i < MEMORY_MAP_COUNT; i++)
 		if (maps[i]) maps[i]->release();
@@ -658,7 +659,7 @@
 
     if ( !nd || !(netStats = (IONetworkStats *) nd->getBuffer()) )
     {
-        IOLog("EtherNet(BMac): invalid network statistics\n");
+        IOLog( "BMacEnet::start: invalid network statistics\n" );
         return false;
     }
 
@@ -679,7 +680,7 @@
 	//
 	if ( netifEnabled )
     {
-		IOLog("EtherNet(BMac): already enabled\n");
+		IOLog( "BMacEnet::enable: already enabled\n" );
 		return kIOReturnSuccess;
 	}
 
@@ -802,7 +803,7 @@
         return;
     }
 
-	// IOLog("Ethernet(BMac): watchdog timer\n");
+	// IOLog( "BMacEnet::handleTimerPop: watchdog timer\n" );
 
 	reserveDebuggerLock();
 	
@@ -813,10 +814,10 @@
     if ( !(dmaStatus & kdbdmaActive) )
     {
 #if 0
-		IOLog( "Ethernet(BMac): Timeout check - RxHead = %d RxTail = %d\n", 
+		IOLog( "BMacEnet::handleTimerPop: Timeout check - RxHead = %d RxTail = %d\n", 
 			rxCommandHead, rxCommandTail);
 
-      IOLog( "Ethernet(BMac): Rx Commands = %08x(p) Rx DMA Ptr = %08x(p)\n\r", rxDMACommandsPhys, IOGetDBDMACommandPtr(ioBaseEnetRxDMA) ); 
+      IOLog( "BMacEnet::handleTimerPop: Rx Commands = %08x(p) Rx DMA Ptr = %08x(p)\n", rxDMACommandsPhys, IOGetDBDMACommandPtr(ioBaseEnetRxDMA) ); 
       [self _dumpDesc:(void *)rxDMACommands Size:rxMaxCommand * sizeof(enet_dma_cmd_t)];
 #endif
 
@@ -839,7 +840,7 @@
 				if (_transmitInterruptOccurred() == false)
 				{
 #if 0
-					IOLog( "Ethernet(BMac): Timeout check - TxHead = %d TxTail = %d\n", 
+					IOLog( "BMacEnet::handleTimerPop: Timeout check - TxHead = %d TxTail = %d\n", 
 						txCommandHead, txCommandTail);
 #endif
 					_restartTransmitter();
@@ -1030,10 +1031,10 @@
         setLinkStatus( linkStatus, medium, linkSpeed * 1000000 );
         
         if ( linkStatus & kIONetworkLinkActive )
-            IOLog( "Ethernet(BMac): Link up at %ld Mbps - %s Duplex\n",
+            IOLog( "BMacEnet::monitorLinkStatus: Link up at %ld Mbps - %s Duplex\n",
                    linkSpeed, (fullDuplex) ? "Full" : "Half" );
         else
-            IOLog( "Ethernet(BMac): Link down\n" );
+            IOLog( "BMacEnet::monitorLinkStatus: Link down\n" );
     }
 }
 
@@ -1226,7 +1227,7 @@
 {
     IOReturn ret = IOPMAckImplied;
 
-    // kprintf("Ethernet(BMac): setPowerState %d\n", powerStateOrdinal);
+    // kprintf( "BMacEnet::setPowerState: setPowerState %d\n", powerStateOrdinal );
 
     if ( currentPowerState == powerStateOrdinal )
         return IOPMAckImplied;
@@ -1234,12 +1235,12 @@
     switch ( powerStateOrdinal )
     {
         case 0:
-            kprintf("Ethernet(BMac): powering off\n");
+            kprintf( "BMacEnet::setPowerState: powering off\n" );
             currentPowerState = powerStateOrdinal;
             break;
 
         case 1:
-            kprintf("Ethernet(BMac): powering on\n");
+            kprintf( "BMacEnet::setPowerState: powering on\n" );
             currentPowerState = powerStateOrdinal;
             break;
 
Index: BMacEnetPrivate.cpp
===================================================================
RCS file: /cvs/root/IO/Drivers/Ethernet/AppleBMacEthernet/BMacEnetPrivate.cpp,v
retrieving revision 1.4
diff -u -d -b -w -r1.4 BMacEnetPrivate.cpp
--- BMacEnetPrivate.cpp	2002/12/12 17:49:45	1.4
+++ BMacEnetPrivate.cpp	2003/04/14 18:00:54
@@ -97,7 +97,7 @@
 
 	if ( dmaCommands == NULL )
 	{
-		IOLog( "Ethernet(BMac): Cant allocate channel DBDMA commands\n" );
+		IOLog( "BMacEnet::_allocateMemory: Cannot allocate channel DBDMA commands\n" );
 		return false;
 	}
 
@@ -293,7 +293,7 @@
 			rxMbuf[i] = allocatePacket(NETWORK_BUFSIZE);
 			if (!rxMbuf[i])
 			{
-				IOLog("Ethernet(BMac): allocatePacket failed\n");
+				IOLog( "BMacEnet::_initRxRing: allocatePacket failed\n" );
 				return false;
 			}
 		}
@@ -305,8 +305,8 @@
 		status = _updateDescriptorFromMbuf(rxMbuf[i], &rxDMACommands[i], true);
 		if (status == false)
 		{    
-			IOLog("Ethernet(BMac): cannot map mbuf to physical memory in"
-				" _initRxRing\n\r");
+			IOLog( "BMacEnet::_initRxRing: cannot map mbuf to physical memory in"
+				" _initRxRing\n" );
 			return false;
 		}
 	}
@@ -422,7 +422,7 @@
                 phyMIIDelay = MII_DP83843_DELAY;
             }
 
-            kprintf("Ethernet(BMac): PHY id = %d\n", phyId);
+            kprintf( "BMacEnet::_resetChip: PHY id = %d\n", phyId );
         }
     }
 
@@ -721,7 +721,7 @@
 	if ( (i == txCommandHead) ||
 		!_updateDescriptorFromMbuf(packet, &tmpCommand, false) )
     {
-		IOLog("Ethernet(BMac): Freeing transmit packet eh?\n\r");
+		IOLog( "BMacEnet::_transmitPacket: Freeing transmit packet eh?\n" );
 		if (packet != txDebuggerPkt)
 			freePacket(packet);
 		return false;
@@ -842,18 +842,13 @@
 	
 	if ( txCommandHead != txCommandTail )
 	{
-		IOLog( "Ethernet(BMac): Polled tranmit timeout - 1\n\r");
+		IOLog( "BMacEnet::_sendPacket: Polled tranmit timeout - 1\n" );
 		return;
     }
 
-    /*
-     * Allocate a NetBuf and copy the debugger transmit data into it.
-	 *
-	 * jliu - no allocation, just recycle the same buffer dedicated to
-	 * KDB transmit.
-     */
-	txDebuggerPkt->m_next = 0;
-	txDebuggerPkt->m_data = (caddr_t) pkt;
+		/* Recycle the same buffer dedicated to KDB transmit.	*/
+
+	bcopy( pkt, txDebuggerPkt->m_data, pkt_len );
 	txDebuggerPkt->m_pkthdr.len = txDebuggerPkt->m_len = pkt_len;
 
     /*
@@ -876,7 +871,7 @@
 
     if ( txCommandHead != txCommandTail )
     {
-		IOLog( "Ethernet(BMac): Polled tranmit timeout - 2\n\r");
+		IOLog( "BMacEnet::_sendPacket: Polled tranmit timeout - 2\n" );
     }
 
     return;
@@ -988,7 +983,7 @@
 		}
 
 #if 0
-      IOLog("Ethernet(BMac): Rx NetBuf[%2d] = %08x Resid[0] = %04x Status[0] = %04x Resid[1] = %04x Status[1] = %04x\n\r",
+      IOLog( "BMacEnet::_receivePackets: Rx NetBuf[%2d] = %08x Resid[0] = %04x Status[0] = %04x Resid[1] = %04x Status[1] = %04x\n",
                 i, (int)nb_map(rxNetbuf[i]), dmaResid[0], dmaStatus[0], dmaResid[1], dmaStatus[1] );      
 #endif 
 
@@ -1079,7 +1074,7 @@
 					freePacket(rxMbuf[i]);	// release new packet.
 					rxMbuf[i] = packet;		// get the old packet back.
 					packet = 0;				// pass up nothing.
-					IOLog("Ethernet(BMac): _updateDescriptorFromMbuf error\n");
+					IOLog( "BMacEnet::_receivePackets: _updateDescriptorFromMbuf error\n" );
 				}
 			}
 			
@@ -1141,7 +1136,8 @@
      */
 
 #if 0
-	IOLog( "Ethernet(BMac): Prev - Rx Head = %2d Rx Tail = %2d Rx Last = %2d\n\r", rxCommandHead, rxCommandTail, last );
+	IOLog( "BMacEnet::_receivePackets: Prev - Rx Head = %2d Rx Tail = %2d Rx Last = %2d\n",
+				rxCommandHead, rxCommandTail, last );
 #endif
 
 	if ( last != lastResetValue )
@@ -1218,7 +1214,7 @@
     if ( dmaChnlStatus & kdbdmaDead )
 	{
 		if (useNetif) netStats->inputErrors++;
-		IOLog( "Ethernet(BMac): Rx DMA Error - Status = %04x\n\r", 
+		IOLog( "BMacEnet::_receivePackets: Rx DMA Error - Status = %04x\n",
 			dmaChnlStatus );
 		_restartReceiver();
 	}
@@ -1231,7 +1227,8 @@
     }
 
 #if 0
-    IOLog( "Ethernet(BMac): New  - Rx Head = %2d Rx Tail = %2d\n\r", rxCommandHead, rxCommandTail );
+    IOLog( "BMacEnet::_receivePackets: New  - Rx Head = %2d Rx Tail = %2d\n",
+				rxCommandHead, rxCommandTail );
 #endif
 
     return doFlushQueue;
@@ -1314,7 +1311,7 @@
     if ( dmaStatus & kdbdmaDead )
     {
 		if (netifEnabled) netStats->outputErrors++;
-		IOLog( "Ethernet(BMac): Tx DMA Error - Status = %04x\n\r", dmaStatus );
+		IOLog( "BMacEnet::_transmitInterruptOccurred: Tx DMA Error - Status = %04x\n", dmaStatus );
 		_restartTransmitter();
 		fServiced = true;
     }
@@ -1402,7 +1399,7 @@
  
     if ( dmaStatus & kdbdmaDead )
     {
-		IOLog( "Ethernet(BMac): Tx DMA Error - Status = %04x\n\r", dmaStatus );
+		IOLog( "BMacEnet::_debugTransmitInterruptOccurred: Tx DMA Error - Status = %04x\n", dmaStatus );
 		_restartTransmitter();
 		fServiced = true;
     }
@@ -1502,7 +1499,7 @@
     {
 		reset_and_select_srom(ioBaseEnet);
 		data = read_srom(ioBaseEnet, i, sromAddressBits);
-		IOLog("Ethernet(BMac): %x = %x ", i, data);
+		IOLog( "BMacEnet::_dump_srom: %x = %x ", i, data );
 		if (i % 10 == 0) IOLog("\n");
     }
 }
@@ -1518,7 +1515,7 @@
 
     for ( i = 0; i < size/sizeof( IODBDMADescriptor ); i++, p+=4, physAddr+=sizeof( IODBDMADescriptor ) )
     {
-        IOLog("Ethernet(BMac): %08x(v) %08x(p):  %08x %08x %08x %08x\n\r",
+        IOLog( "BMacEnet::_dumpDesc: %08x(v) %08x(p):  %08x %08x %08x %08x\n",
               (int)p,
               (int)physAddr,
               (int)OSReadSwapInt32(p, 0),   (int)OSReadSwapInt32(p, 4),
@@ -1532,187 +1529,188 @@
 {
     u_int16_t	dataValue;
 
-    IOLog("\nEthernet(BMac): IO Address = %08x", (int)ioBaseEnet );
+    IOLog( "\nBMacEnet::_dumpRegisters: IO Address = %08x", (int)ioBaseEnet );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kXIFC);
-    IOLog("\nEthernet(BMac): Read Register %04x Transceiver I/F = %04x", kXIFC, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Transceiver I/F = %04x", kXIFC, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kSTAT);
-    IOLog("\nEthernet(BMac): Read Register %04x Int Events      = %04x", kSTAT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Int Events      = %04x", kSTAT, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kINTDISABLE);
-    IOLog("\nEthernet(BMac): Read Register %04x Int Disable     = %04x", kINTDISABLE, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Int Disable     = %04x", kINTDISABLE, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kTXRST);
-    IOLog("\nEthernet(BMac): Read Register %04x Tx Reset        = %04x", kTXRST, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Tx Reset        = %04x", kTXRST, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kTXCFG);
-    IOLog("\nEthernet(BMac): Read Register %04x Tx Config       = %04x", kTXCFG, dataValue );
-    IOLog("\nEthernet(BMac): -------------------------------------------------------" );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Tx Config       = %04x", kTXCFG, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: -------------------------------------------------------" );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kIPG1);
-    IOLog("\nEthernet(BMac): Read Register %04x IPG1            = %04x", kIPG1, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x IPG1            = %04x", kIPG1, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kIPG2);
-    IOLog("\nEthernet(BMac): Read Register %04x IPG2            = %04x", kIPG2, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x IPG2            = %04x", kIPG2, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kALIMIT);
-    IOLog("\nEthernet(BMac): Read Register %04x Attempt Limit   = %04x", kALIMIT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Attempt Limit   = %04x", kALIMIT, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kSLOT);
-    IOLog("\nEthernet(BMac): Read Register %04x Slot Time       = %04x", kSLOT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Slot Time       = %04x", kSLOT, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kPALEN);
-    IOLog("\nEthernet(BMac): Read Register %04x Preamble Length = %04x", kPALEN, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Preamble Length = %04x", kPALEN, dataValue );
 
-    IOLog("\nEthernet(BMac): -------------------------------------------------------" );
+    IOLog( "\nBMacEnet::_dumpRegisters: -------------------------------------------------------" );
     dataValue = ReadBigMacRegister(ioBaseEnet, kPAPAT);
-    IOLog("\nEthernet(BMac): Read Register %04x Preamble Pattern         = %04x", kPAPAT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Preamble Pattern         = %04x", kPAPAT, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kTXSFD);
-    IOLog("\nEthernet(BMac): Read Register %04x Tx Start Frame Delimeter = %04x", kTXSFD, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Tx Start Frame Delimeter = %04x", kTXSFD, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kJAM);
-    IOLog("\nEthernet(BMac): Read Register %04x Jam Size                 = %04x", kJAM, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Jam Size                 = %04x", kJAM, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kTXMAX);
-    IOLog("\nEthernet(BMac): Read Register %04x Tx Max Size              = %04x", kTXMAX, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Tx Max Size              = %04x", kTXMAX, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kTXMIN);
-    IOLog("\nEthernet(BMac): Read Register %04x Tx Min Size              = %04x", kTXMIN, dataValue );
-    IOLog("\nEthernet(BMac): -------------------------------------------------------" );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Tx Min Size              = %04x", kTXMIN, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: -------------------------------------------------------" );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kPAREG);
-    IOLog("\nEthernet(BMac): Read Register %04x Peak Attempts           = %04x", kPAREG, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Peak Attempts           = %04x", kPAREG, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kDCNT);
-    IOLog("\nEthernet(BMac): Read Register %04x Defer Timer             = %04x", kDCNT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Defer Timer             = %04x", kDCNT, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kNCCNT);
-    IOLog("\nEthernet(BMac): Read Register %04x Normal Collision Count  = %04x", kNCCNT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Normal Collision Count  = %04x", kNCCNT, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kNTCNT);
-    IOLog("\nEthernet(BMac): Read Register %04x Network Collision Count = %04x", kNTCNT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Network Collision Count = %04x", kNTCNT, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kEXCNT);
-    IOLog("\nEthernet(BMac): Read Register %04x Excessive Coll Count    = %04x", kEXCNT, dataValue );
-    IOLog("\nEthernet(BMac): -------------------------------------------------------" );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Excessive Coll Count    = %04x", kEXCNT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: -------------------------------------------------------" );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kLTCNT);
-    IOLog("\nEthernet(BMac): Read Register %04x Late Collision Count = %04x", kLTCNT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Late Collision Count = %04x", kLTCNT, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kRSEED);
-    IOLog("\nEthernet(BMac): Read Register %04x Random Seed          = %04x", kRSEED, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Random Seed          = %04x", kRSEED, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kTXSM);
-    IOLog("\nEthernet(BMac): Read Register %04x Tx State Machine     = %04x", kTXSM, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Tx State Machine     = %04x", kTXSM, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kRXRST);
-    IOLog("\nEthernet(BMac): Read Register %04x Rx Reset             = %04x", kRXRST, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Rx Reset             = %04x", kRXRST, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kRXCFG);
-    IOLog("\nEthernet(BMac): Read Register %04x Rx Config            = %04x", kRXCFG, dataValue );
-    IOLog("\nEthernet(BMac): -------------------------------------------------------" );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Rx Config            = %04x", kRXCFG, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: -------------------------------------------------------" );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kRXMAX);
-    IOLog("\nEthernet(BMac): Read Register %04x Rx Max Size         = %04x", kRXMAX, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Rx Max Size         = %04x", kRXMAX, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kRXMIN);
-    IOLog("\nEthernet(BMac): Read Register %04x Rx Min Size         = %04x", kRXMIN, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Rx Min Size         = %04x", kRXMIN, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kMADD2);
-    IOLog("\nEthernet(BMac): Read Register %04x Mac Address 2       = %04x", kMADD2, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Mac Address 2       = %04x", kMADD2, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kMADD1);
-    IOLog("\nEthernet(BMac): Read Register %04x Mac Address 1       = %04x", kMADD1, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Mac Address 1       = %04x", kMADD1, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kMADD0);
-    IOLog("\nEthernet(BMac): Read Register %04x Mac Address 0       = %04x", kMADD0, dataValue );
-    IOLog("\nEthernet(BMac): -------------------------------------------------------" );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Mac Address 0       = %04x", kMADD0, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: -------------------------------------------------------" );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kFRCNT);
-    IOLog("\nEthernet(BMac): Read Register %04x Rx Frame Counter    = %04x", kFRCNT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Rx Frame Counter    = %04x", kFRCNT, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kLECNT);
-    IOLog("\nEthernet(BMac): Read Register %04x Rx Length Error Cnt = %04x", kLECNT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Rx Length Error Cnt = %04x", kLECNT, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kAECNT);
-    IOLog("\nEthernet(BMac): Read Register %04x Alignment Error Cnt = %04x", kAECNT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Alignment Error Cnt = %04x", kAECNT, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kFECNT);
-    IOLog("\nEthernet(BMac): Read Register %04x FCS Error Cnt       = %04x", kFECNT, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x FCS Error Cnt       = %04x", kFECNT, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kRXSM);
-    IOLog("\nEthernet(BMac): Read Register %04x Rx State Machine    = %04x", kRXSM, dataValue );
-    IOLog("\nEthernet(BMac): -------------------------------------------------------" );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Rx State Machine    = %04x", kRXSM, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: -------------------------------------------------------" );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kRXCV);
-    IOLog("\nEthernet(BMac): Read Register %04x Rx Code Violation = %04x", kRXCV, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Rx Code Violation = %04x", kRXCV, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kHASH3);
-    IOLog("\nEthernet(BMac): Read Register %04x Hash 3            = %04x", kHASH3, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Hash 3            = %04x", kHASH3, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kHASH2);
-    IOLog("\nEthernet(BMac): Read Register %04x Hash 2            = %04x", kHASH2, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Hash 2            = %04x", kHASH2, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kHASH1);
-    IOLog("\nEthernet(BMac): Read Register %04x Hash 1            = %04x", kHASH1, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Hash 1            = %04x", kHASH1, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kHASH0);
-    IOLog("\nEthernet(BMac): Read Register %04x Hash 0            = %04x", kHASH0, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Hash 0            = %04x", kHASH0, dataValue );
     IOLog("\n-------------------------------------------------------" );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kAFR2);
-    IOLog("\nEthernet(BMac): Read Register %04x Address Filter 2   = %04x", kAFR2, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Address Filter 2   = %04x", kAFR2, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kAFR1);
-    IOLog("\nEthernet(BMac): Read Register %04x Address Filter 1   = %04x", kAFR1, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Address Filter 1   = %04x", kAFR1, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kAFR0);
-    IOLog("\nEthernet(BMac): Read Register %04x Address Filter 0   = %04x", kAFR0, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Address Filter 0   = %04x", kAFR0, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kAFCR);
-    IOLog("\nEthernet(BMac): Read Register %04x Adress Filter Mask = %04x", kAFCR, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Adress Filter Mask = %04x", kAFCR, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kTXFIFOCSR);
-    IOLog("\nEthernet(BMac): Read Register %04x Tx FIFO CSR        = %04x", kTXFIFOCSR, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Tx FIFO CSR        = %04x", kTXFIFOCSR, dataValue );
     IOLog("\n-------------------------------------------------------" );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kTXTH);
-    IOLog("\nEthernet(BMac): Read Register %04x Tx Threshold  = %04x", kTXTH, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Tx Threshold  = %04x", kTXTH, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kRXFIFOCSR);
-    IOLog("\nEthernet(BMac): Read Register %04x Rx FIFO CSR   = %04x", kRXFIFOCSR, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Rx FIFO CSR   = %04x", kRXFIFOCSR, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kMEMADD);
-    IOLog("\nEthernet(BMac): Read Register %04x Mem Addr      = %04x", kMEMADD, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Mem Addr      = %04x", kMEMADD, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kMEMDATAHI);
-    IOLog("\nEthernet(BMac): Read Register %04x Mem Data High = %04x", kMEMDATAHI, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Mem Data High = %04x", kMEMDATAHI, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kMEMDATALO);
-    IOLog("\nEthernet(BMac): Read Register %04x Mem Data Low  = %04x", kMEMDATALO, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Mem Data Low  = %04x", kMEMDATALO, dataValue );
     IOLog("\n-------------------------------------------------------" );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kXCVRIF);
-    IOLog("\nEthernet(BMac): Read Register %04x Transceiver IF Control = %04x", kXCVRIF, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Transceiver IF Control = %04x", kXCVRIF, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kCHIPID);
-    IOLog("\nEthernet(BMac): Read Register %04x Chip ID                = %04x", kCHIPID, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Chip ID                = %04x", kCHIPID, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kMIFCSR);
-    IOLog("\nEthernet(BMac): Read Register %04x MII CSR                = %04x", kMIFCSR, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x MII CSR                = %04x", kMIFCSR, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kSROMCSR);
-    IOLog("\nEthernet(BMac): Read Register %04x SROM CSR               = %04x", kSROMCSR, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x SROM CSR               = %04x", kSROMCSR, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kTXPNTR);
-    IOLog("\nEthernet(BMac): Read Register %04x Tx Pointer             = %04x", kTXPNTR, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Tx Pointer             = %04x", kTXPNTR, dataValue );
 
     dataValue = ReadBigMacRegister(ioBaseEnet, kRXPNTR);
-    IOLog("\nEthernet(BMac): Read Register %04x Rx Pointer             = %04x", kRXPNTR, dataValue );
-    IOLog("\nEthernet(BMac): -------------------------------------------------------\n" );
-}
+    IOLog( "\nBMacEnet::_dumpRegisters: Read Register %04x Rx Pointer             = %04x", kRXPNTR, dataValue );
+    IOLog( "\nBMacEnet::_dumpRegisters: -------------------------------------------------------\n" );
+	return;
+}/* end _dumpRegisters */
 #endif DEBUG
 
 
Index: AppleBMacEthernet.pbproj/project.pbxproj
===================================================================
RCS file: /cvs/root/IO/Drivers/Ethernet/AppleBMacEthernet/AppleBMacEthernet.pbproj/project.pbxproj,v
retrieving revision 1.7
diff -u -d -b -w -r1.7 project.pbxproj
--- project.pbxproj	2002/12/12 17:49:45	1.7
+++ project.pbxproj	2003/04/14 18:00:54
@@ -179,12 +179,12 @@
 				BUILD_SETTING = "";
 				FRAMEWORK_SEARCH_PATHS = "";
 				HEADER_SEARCH_PATHS = "";
-				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions/IONetworkingFamily.kext/Contents/PlugIns";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.driver.AppleBMacEthernet;
-				MODULE_VERSION = "\U00011.1.2f1";
+				MODULE_VERSION = "\U00011.1.3f1";
 				OTHER_CFLAGS = "";
 				OTHER_LDFLAGS = "";
 				OTHER_REZFLAGS = "";
@@ -198,7 +198,7 @@
 			);
 			isa = PBXBundleTarget;
 			name = AppleBMacEthernet;
-			productInstallPath = "$(SYSTEM_LIBRARY_DIR)/Extensions";
+			productInstallPath = "$(SYSTEM_LIBRARY_DIR)/Extensions/IONetworkingFamily.kext/Contents/PlugIns";
 			productName = AppleBMacEthernet;
 			productReference = 01EE1BD3FFC9F1AA11CA2B4D;
 			productSettingsXML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
@@ -222,7 +222,7 @@
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>1.1.2f1</string>
+	<string>1.1.3f1</string>
 	<key>IOKitPersonalities</key>
 	<dict>
 		<key>Name Matching</key>
Index: pbxbuild.data/ProjectBuilderJambase
===================================================================
RCS file: /cvs/root/IO/Drivers/Ethernet/AppleBMacEthernet/pbxbuild.data/ProjectBuilderJambase,v
retrieving revision 1.3
diff -u -d -b -w -r1.3 ProjectBuilderJambase
--- ProjectBuilderJambase	2002/12/12 17:49:45	1.3
+++ ProjectBuilderJambase	2003/04/14 18:00:54
@@ -1857,6 +1857,7 @@
     /bin/echo "KMOD_EXPLICIT_DECL($(MODULE_NAME), \"$(MODULE_VERSION)\", _start, _stop)" >> "$(1)"
     /bin/echo "__private_extern__ kmod_start_func_t *_realmain = $(MODULE_START);" >> "$(1)"
     /bin/echo "__private_extern__ kmod_stop_func_t *_antimain = $(MODULE_STOP);" >> "$(1)"
+    /bin/echo "__private_extern__ int _kext_apple_cc = __APPLE_CC__ ;" >> "$(1)"
 }
 
 # GenerateFrameworkStub <framework stub>
Index: pbxbuild.data/AppleBMacEthernet.build/Info.plist
===================================================================
RCS file: /cvs/root/IO/Drivers/Ethernet/AppleBMacEthernet/pbxbuild.data/AppleBMacEthernet.build/Info.plist,v
retrieving revision 1.3
diff -u -d -b -w -r1.3 Info.plist
--- Info.plist	2002/12/12 17:49:46	1.3
+++ Info.plist	2003/04/14 18:00:54
@@ -17,7 +17,7 @@
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>1.1.2f1</string>
+	<string>1.1.3f1</string>
 	<key>IOKitPersonalities</key>
 	<dict>
 		<key>Name Matching</key>
Index: pbxbuild.data/AppleBMacEthernet.build/Jamfile.jam
===================================================================
RCS file: /cvs/root/IO/Drivers/Ethernet/AppleBMacEthernet/pbxbuild.data/AppleBMacEthernet.build/Jamfile.jam,v
retrieving revision 1.3
diff -u -d -b -w -r1.3 Jamfile.jam
--- Jamfile.jam	2002/12/12 17:49:46	1.3
+++ Jamfile.jam	2003/04/14 18:00:54
@@ -7,7 +7,7 @@
 export deferred DEVELOPMENT_LANGUAGE = English ;
 export deferred PROJECT = $(PROJECT_NAME) ;
 export deferred PROJECT_NAME = AppleBMacEthernet ;
-export deferred SRCROOT = /Volumes/main80gig/osX/projects/bmacExtract ;
+export deferred SRCROOT = /Volumes/main80gig/osX/projects/AppleBMacEthernet ;
 
 # User-defined project-wide settings for project
 
@@ -27,12 +27,12 @@
 export deferred BUILD_SETTING =  ;
 export deferred FRAMEWORK_SEARCH_PATHS =  ;
 export deferred HEADER_SEARCH_PATHS =  ;
-export deferred INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions" ;
+export deferred INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions/IONetworkingFamily.kext/Contents/PlugIns" ;
 export deferred KERNEL_MODULE = YES ;
 export deferred LIBRARY_SEARCH_PATHS =  ;
 export deferred MODULE_IOKIT = YES ;
 export deferred MODULE_NAME = com.apple.driver.AppleBMacEthernet ;
-export deferred MODULE_VERSION += 1.1.2f1 ;
+export deferred MODULE_VERSION += 1.1.3f1 ;
 export deferred OTHER_CFLAGS =  ;
 export deferred OTHER_LDFLAGS =  ;
 export deferred OTHER_REZFLAGS =  ;
Index: pbxbuild.data/AppleBMacEthernet.build/pbdevelopment.plist
===================================================================
RCS file: /cvs/root/IO/Drivers/Ethernet/AppleBMacEthernet/pbxbuild.data/AppleBMacEthernet.build/pbdevelopment.plist,v
retrieving revision 1.3
diff -u -d -b -w -r1.3 pbdevelopment.plist
--- pbdevelopment.plist	2002/12/12 17:49:46	1.3
+++ pbdevelopment.plist	2003/04/14 18:00:54
@@ -3,6 +3,6 @@
 <plist version="1.0">
 <dict>
 	<key>PBXProjectSourcePath</key>
-	<string>/Volumes/main80gig/osX/projects/bmacExtract/AppleBMacEthernet.pbproj</string>
+	<string>/Volumes/main80gig/osX/projects/AppleBMacEthernet/AppleBMacEthernet.pbproj</string>
 </dict>
 </plist>
